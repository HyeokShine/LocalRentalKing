{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport { Button, Col, Row } from 'antd';\nimport { Tag } from 'antd';\nimport AppLayout from '../components/AppLayout/AppLayout'; // import PostForm from '../components/PostForm';\n// import PostCard from '../components/PostCard';\n\nimport LoginForm from '../components/LoginForm';\nimport { logoutRequestAction } from '../reducers/user';\nimport { LOAD_POST_REQUEST } from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard from \"../components/PostCard\";\n\nfunction Home() {\n  _s();\n\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostLoading = _useSelector2.loadPostLoading,\n      reTweetError = _useSelector2.reTweetError,\n      id = _useSelector2.id,\n      object_TagsData = _useSelector2.object_TagsData;\n\n  var _useInView = useInView(),\n      _useInView2 = _slicedToArray(_useInView, 2),\n      ref = _useInView2[0],\n      inView = _useInView2[1]; // const [login,setLogin] = useState(false);\n  // const onLogOut = useCallback(() => {\n  //   setLogin(false);\n  // }, []);\n\n\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\n  function () {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n      dispatch({\n        type: LOAD_POST_REQUEST,\n        data: \"전체\",\n        categoryNum: 1,\n        lastId: lastId // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\n\n      });\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, me ? __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Tags, {\n    tagsData: object_TagsData,\n    boardNum: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 34\n      }\n    });\n  }), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  })) : __jsx(Row, {\n    gutter: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    xs: 6,\n    md: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: \"main.png\",\n    style: {\n      height: 950\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    xs: 14,\n    md: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"\\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\\uC744 \\uC9C0\\uAE08 \\uC774\\uC6A9\\uD574 \\uBCF4\\uC138\\uC694!\"), __jsx(LoginForm, {\n    style: {\n      marginTop: 300\n    },\n    setLogin: setLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    xs: 2,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(Home, \"5Twd/By/y8tnOIsPoWnzK3eyhmo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInView];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/index.js"],"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","useInView","Button","Col","Row","Tag","AppLayout","LoginForm","logoutRequestAction","LOAD_POST_REQUEST","Tags","PostCard","Home","dispatch","state","user","me","post","mainPosts","hasMorePost","loadPostLoading","reTweetError","id","object_TagsData","ref","inView","lastId","length","type","data","categoryNum","map","undefined","height","marginTop","setLogin"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport wrapper from '../store/configureStore';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { END } from 'redux-saga';\r\nimport {Button, Col, Row} from 'antd';\r\nimport { Tag } from 'antd';\r\n\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\n// import PostForm from '../components/PostForm';\r\n// import PostCard from '../components/PostCard';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nimport {LOAD_MY_INFO_REQUEST, logoutRequestAction} from '../reducers/user';\r\nimport { LOAD_POST_REQUEST } from '../reducers/post';\r\nimport Tags from \"../components/Tags\";\r\nimport PostCard from \"../components/PostCard\";\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostLoading, reTweetError, id , object_TagsData } = useSelector((state) => state.post);\r\n  const [ref, inView] = useInView();\r\n  // const [login,setLogin] = useState(false);\r\n\r\n  // const onLogOut = useCallback(() => {\r\n  //   setLogin(false);\r\n  // }, []);\r\n\r\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n        dispatch({\r\n          type: LOAD_POST_REQUEST,\r\n          data:\"전체\",\r\n          categoryNum:1,\r\n          lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\r\n        });\r\n      }\r\n    },[inView, hasMorePost, loadPostLoading, mainPosts, id]);\r\n\r\n  return (\r\n    <div>{me ? (\r\n      <AppLayout>\r\n        {/*<Button onClick={}> 로그아웃</Button>*/}\r\n        <Tags tagsData={object_TagsData} boardNum={1}/>\r\n        {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n      {/* 아직 게시물을 전부 열람하지 않았고 && 게시물을 요청하는 중이 아닐경우 인피니트 스크롤 동작 : 아닐경우 undefined */}\r\n      </AppLayout>\r\n    ) : (\r\n      <Row gutter={8}>\r\n        <Col xs={6} md={10}>\r\n          <img src=\"main.png\" style={{ height: 950 }}/>\r\n        </Col>\r\n        <Col xs={14} md={10}>\r\n          <h1>우리동네 렌탈대장을 지금 이용해 보세요!</h1>\r\n          <LoginForm style={{ marginTop: 300 }} setLogin={setLogin}/>\r\n        </Col>\r\n        <Col xs={2} md={4}>\r\n        </Col>\r\n      </Row>\r\n    )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = ''; // 기존 방식에서는 브라우저에서 쿠키를 만들어주기 때문에 각각의 독립된 브라우저에서 쿠키를 브라우저 >> 프론트 >> 백 으로 보내는 삼중구조지만\r\n  // 쿠키가 다른 사용자에게 넘어갈 일이 없었으나 , SSR은 브라우저에서 쿠키를 동봉받아 프론트서버에서 쿠키를 백서버에 전달하는 이중구조 방식으로 , 잘못하면 내 로그인 쿠키로 다른 사용자가 접속하게 될 수 있기때문에\r\n  // 이를 방지하기 위하여 우선 헤더에 들어간 쿠키를 공백으로 지워주고 로직을 시작한다.\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data:\"전체\",\r\n    categoryNum:1,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}