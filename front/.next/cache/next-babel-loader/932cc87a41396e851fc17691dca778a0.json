{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport wrapper from '../store/configureStore';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from 'react-intersection-observer';\nimport { END } from 'redux-saga';\nimport { Button, Col, Row } from 'antd';\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport LoginForm from '../components/LoginForm';\nimport { LOAD_MY_INFO_REQUEST, logoutRequestAction, UPDATE_LOCAL } from '../reducers/user';\nimport { LOAD_POST_REQUEST, TEST, UPDATE_BOARD, UPDATE_TAG } from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard1 from \"../components/PostCard1\";\nimport axios from \"axios\";\nimport Layout from \"../components/Layout\";\nimport PostCard2 from \"../components/PostCard2\";\nimport SearchBar from \"../components/SearchBar\";\n\nfunction Home() {\n  const dispatch = useDispatch();\n  const {\n    me,\n    local\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    reTweetError,\n    id,\n    object_TagsData,\n    selectedTag\n  } = useSelector(state => state.post);\n  const {\n    0: view,\n    1: setView\n  } = useState(true);\n  const onSwitch = useCallback(() => {\n    setView(!view);\n  }, [view]);\n  useEffect(() => {\n    if (local === null) dispatch({\n      type: UPDATE_LOCAL,\n      data: me.location\n    });\n  }, [me.location]);\n  useEffect(() => {\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 100) {\n        if (hasMorePost && !loadPostLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n          dispatch({\n            type: LOAD_POST_REQUEST,\n            data: selectedTag,\n            boardNum: 1,\n            lastId: lastId\n          });\n        } // 지역변수를 건드려봣자 어차피 렌더링이 되지 않는다. 실제 동작으로 테스트 해야할듯\n\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePost, loadPostLoading]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, view ? __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(Tags, {\n    tagsData: object_TagsData,\n    boardNum: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    onClick: onSwitch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"\\uC804\\uD658\\uC2A4\\uC704\\uCE58\"), mainPosts.map(post => __jsx(PostCard1, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 36\n    }\n  }))) : __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(Tags, {\n    tagsData: object_TagsData,\n    boardNum: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    onClick: onSwitch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"\\uC804\\uD658\\uC2A4\\uC704\\uCE58\"), mainPosts.map(post => __jsx(PostCard2, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 36\n    }\n  }))));\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: UPDATE_TAG,\n    data: \"전체\"\n  });\n  context.store.dispatch({\n    type: UPDATE_BOARD,\n    data: 1\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: \"전체\",\n    boardNum: 1\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/index.js"],"names":["React","useCallback","useEffect","useState","wrapper","useDispatch","useSelector","useInView","END","Button","Col","Row","AppLayout","LoginForm","LOAD_MY_INFO_REQUEST","logoutRequestAction","UPDATE_LOCAL","LOAD_POST_REQUEST","TEST","UPDATE_BOARD","UPDATE_TAG","Tags","PostCard1","axios","Layout","PostCard2","SearchBar","Home","dispatch","me","local","state","user","mainPosts","hasMorePost","loadPostLoading","reTweetError","id","object_TagsData","selectedTag","post","view","setView","onSwitch","type","data","location","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","boardNum","addEventListener","removeEventListener","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport wrapper from '../store/configureStore';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useInView} from 'react-intersection-observer';\r\nimport {END} from 'redux-saga';\r\nimport {Button, Col, Row} from 'antd';\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\nimport LoginForm from '../components/LoginForm';\r\n\r\nimport {LOAD_MY_INFO_REQUEST, logoutRequestAction, UPDATE_LOCAL} from '../reducers/user';\r\nimport {LOAD_POST_REQUEST, TEST, UPDATE_BOARD, UPDATE_TAG} from '../reducers/post';\r\nimport Tags from \"../components/Tags\";\r\nimport PostCard1 from \"../components/PostCard1\";\r\nimport axios from \"axios\";\r\nimport Layout from \"../components/Layout\";\r\nimport PostCard2 from \"../components/PostCard2\";\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const {me, local} = useSelector((state) => state.user);\r\n  const {\r\n    mainPosts,\r\n    hasMorePost,\r\n    loadPostLoading,\r\n    reTweetError,\r\n    id,\r\n    object_TagsData,\r\n    selectedTag\r\n  } = useSelector((state) => state.post);\r\n  const [view, setView] = useState(true);\r\n\r\n  const onSwitch = useCallback(() => {\r\n    setView(!view);\r\n  }, [view]);\r\n\r\n  useEffect(()=>{\r\n    if(local === null)\r\n    dispatch({\r\n      type:UPDATE_LOCAL,\r\n      data:me.location,\r\n    })\r\n  },[me.location])\r\n\r\n  useEffect(() => {\r\n    const onScroll = () => {\r\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 100) {\r\n        if (hasMorePost && !loadPostLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n          dispatch({\r\n            type: LOAD_POST_REQUEST,\r\n            data: selectedTag,\r\n            boardNum: 1,\r\n            lastId: lastId,\r\n          });\r\n        } // 지역변수를 건드려봣자 어차피 렌더링이 되지 않는다. 실제 동작으로 테스트 해야할듯\r\n      }\r\n    };\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [hasMorePost, loadPostLoading]);\r\n\r\n  return (\r\n    <div>\r\n      {view ? (\r\n        <Layout>\r\n          <Tags tagsData={object_TagsData} boardNum={1}/>\r\n          <Button onClick={onSwitch}>전환스위치</Button>\r\n          {mainPosts.map((post) => <PostCard1 key={post.id} post={post}/>)}\r\n        </Layout>\r\n      ) : (\r\n        <Layout>\r\n          <Tags tagsData={object_TagsData} boardNum={1}/>\r\n          <Button onClick={onSwitch}>전환스위치</Button>\r\n          {mainPosts.map((post) => <PostCard2 key={post.id} post={post}/>)}\r\n        </Layout>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: UPDATE_TAG,\r\n    data: \"전체\",\r\n  });\r\n  context.store.dispatch({\r\n    type: UPDATE_BOARD,\r\n    data: 1,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data: \"전체\",\r\n    boardNum: 1,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}