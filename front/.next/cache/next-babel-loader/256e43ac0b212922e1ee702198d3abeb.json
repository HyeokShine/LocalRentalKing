{"ast":null,"code":"var _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\talentsend.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport wrapper from '../store/configureStore';\nimport Head from 'next/head';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { LOAD_PLAY_POST_REQUEST, LOAD_POST_REQUEST, UPDATE_TAG } from '../reducers/post';\nimport Tags from \"../components/Tags\";\nimport PostCard from \"../components/PostCard\";\n\nfunction TalentSend() {\n  const dispatch = useDispatch();\n  const [ref, inView] = useInView();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    talent_TagsData,\n    selectedTag,\n    mainPosts,\n    hasMorePost,\n    loadPostLoading,\n    id\n  } = useSelector(state => state.post);\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\n  () => {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n      dispatch({\n        type: LOAD_POST_REQUEST,\n        data: selectedTag,\n        categoryNum: 4,\n        lastId // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\n\n      });\n      console.log(\"선택 된 태그:\" + selectedTag);\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id]);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"\\uD798\\uC744 \\uBE4C\\uB824\\uC904\\uAC8C | \\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\")), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Tags, {\n    tagsData: talent_TagsData,\n    boardNum: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }\n  })), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = cookie;\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: UPDATE_TAG,\n    data: \"전체\"\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: \"전체\",\n    categoryNum: 4\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default TalentSend;","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/talentsend.js"],"names":["React","useCallback","useEffect","useState","axios","wrapper","Head","useDispatch","useSelector","END","useInView","AppLayout","LOAD_MY_INFO_REQUEST","LOAD_PLAY_POST_REQUEST","LOAD_POST_REQUEST","UPDATE_TAG","Tags","PostCard","TalentSend","dispatch","ref","inView","me","state","user","talent_TagsData","selectedTag","mainPosts","hasMorePost","loadPostLoading","id","post","lastId","length","type","data","categoryNum","console","log","map","undefined","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport wrapper from '../store/configureStore';\r\nimport Head from 'next/head';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport {LOAD_PLAY_POST_REQUEST, LOAD_POST_REQUEST, UPDATE_TAG} from '../reducers/post';\r\nimport Tags from \"../components/Tags\";\r\nimport PostCard from \"../components/PostCard\";\r\n\r\nfunction TalentSend() {\r\n  const dispatch = useDispatch();\r\n  const [ref, inView] = useInView();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { talent_TagsData,selectedTag,mainPosts, hasMorePost, loadPostLoading, id } = useSelector((state) => state.post);\r\n\r\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n        dispatch({\r\n          type: LOAD_POST_REQUEST,\r\n          data:selectedTag,\r\n          categoryNum:4,\r\n          lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\r\n        });\r\n        console.log(\"선택 된 태그:\"+selectedTag);\r\n      }\r\n    },[inView, hasMorePost, loadPostLoading, mainPosts, id]);\r\n\r\n  if (!me) {\r\n    return '내 정보 로딩중...';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>힘을 빌려줄게 | 우리동네 렌탈대장</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <Tags tagsData={talent_TagsData} boardNum={4}/>\r\n        {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\r\n        <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n        {/* 아직 게시물을 전부 열람하지 않았고 && 게시물을 요청하는 중이 아닐경우 인피니트 스크롤 동작 : 아닐경우 undefined */}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: UPDATE_TAG,\r\n    data:\"전체\",\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data:\"전체\",\r\n    categoryNum:4,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default TalentSend;\r\n"]},"metadata":{},"sourceType":"module"}