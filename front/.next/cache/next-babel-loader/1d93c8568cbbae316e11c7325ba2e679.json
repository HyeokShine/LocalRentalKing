{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\study\\\\LocalRentalKing\\\\front\\\\pages\\\\objectrecieve.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInView } from \"react-intersection-observer\";\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport { LOAD_O_RECIEVE_POST_REQUEST, LOAD_POST_REQUEST } from '../reducers/post';\nimport { Button } from \"antd\";\nimport Tags from \"../components/Tags\";\nimport PostCard from \"../components/PostCard\";\n\nfunction ObjectRecieve() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useInView = useInView(),\n      _useInView2 = _slicedToArray(_useInView, 2),\n      ref = _useInView2[0],\n      inView = _useInView2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      selectedTag = _useSelector2.selectedTag,\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePost = _useSelector2.hasMorePost,\n      loadPostLoading = _useSelector2.loadPostLoading,\n      id = _useSelector2.id,\n      object_TagsData = _useSelector2.object_TagsData;\n\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\n  function () {\n    if (inView && hasMorePost && !loadPostLoading) {\n      var _mainPosts;\n\n      var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\n\n      dispatch({\n        type: LOAD_POST_REQUEST,\n        data: selectedTag,\n        boardNum: 1,\n        lastId: lastId // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\n\n      });\n      console.log(\"선택 된 태그:\" + selectedTag);\n    }\n  }, [inView, hasMorePost, loadPostLoading, mainPosts, id]);\n\n  if (!me) {\n    return '내 정보 로딩중...';\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"\\uBB3C\\uAC74\\uC744 \\uBE4C\\uB824\\uC918 | \\uC6B0\\uB9AC\\uB3D9\\uB124 \\uB80C\\uD0C8\\uB300\\uC7A5\")), __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Tags, {\n    tagsData: object_TagsData,\n    boardNum: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    ref: hasMorePost && !loadPostLoading ? ref : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(ObjectRecieve, \"GFLNF7dB4H/r7vq60DQlFZ5EnE8=\", false, function () {\n  return [useDispatch, useInView, useSelector, useSelector];\n});\n\n_c = ObjectRecieve;\nexport var __N_SSP = true;\nexport default ObjectRecieve;\n\nvar _c;\n\n$RefreshReg$(_c, \"ObjectRecieve\");","map":{"version":3,"sources":["C:/study/LocalRentalKing/front/pages/objectrecieve.js"],"names":["React","useCallback","useEffect","useState","Head","useDispatch","useSelector","useInView","AppLayout","LOAD_O_RECIEVE_POST_REQUEST","LOAD_POST_REQUEST","Button","Tags","PostCard","ObjectRecieve","dispatch","ref","inView","state","user","me","post","selectedTag","mainPosts","hasMorePost","loadPostLoading","id","object_TagsData","lastId","length","type","data","boardNum","console","log","undefined"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AAGA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,OAAOC,SAAP,MAAsB,mCAAtB;AAGA,SAAQC,2BAAR,EAAqCC,iBAArC,QAAyE,kBAAzE;AACA,SAAQC,MAAR,QAAqB,MAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAGA,SAASC,aAAT,GAAyB;AAAA;;AACvB,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AACA,mBAAsBE,SAAS,EAA/B;AAAA;AAAA,MAAOS,GAAP;AAAA,MAAYC,MAAZ;;AACA,qBAAeX,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA1B;AAAA,MAAQC,EAAR,gBAAQA,EAAR;;AACA,sBAAsFd,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAAjG;AAAA,MAAQC,WAAR,iBAAQA,WAAR;AAAA,MAAoBC,SAApB,iBAAoBA,SAApB;AAAA,MAA+BC,WAA/B,iBAA+BA,WAA/B;AAAA,MAA4CC,eAA5C,iBAA4CA,eAA5C;AAAA,MAA6DC,EAA7D,iBAA6DA,EAA7D;AAAA,MAAkEC,eAAlE,iBAAkEA,eAAlE;;AAEAzB,EAAAA,SAAS,EAAE;AACT,cAAM;AACJ,QAAIe,MAAM,IAAIO,WAAV,IAAyB,CAACC,eAA9B,EAA+C;AAAA;;AAC7C,UAAMG,MAAM,iBAAGL,SAAS,CAACA,SAAS,CAACM,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCH,EAAhD,CAD6C,CACO;;AACpDX,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAEpB,iBADC;AAEPqB,QAAAA,IAAI,EAACT,WAFE;AAGPU,QAAAA,QAAQ,EAAC,CAHF;AAIPJ,QAAAA,MAAM,EAANA,MAJO,CAIC;;AAJD,OAAD,CAAR;AAMAK,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAWZ,WAAvB;AACD;AACF,GAZM,EAYL,CAACL,MAAD,EAASO,WAAT,EAAsBC,eAAtB,EAAuCF,SAAvC,EAAkDG,EAAlD,CAZK,CAAT;;AAcA,MAAI,CAACN,EAAL,EAAS;AACP,WAAO,aAAP;AACD;;AAED,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iGADF,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEO,eAAhB;AAAiC,IAAA,QAAQ,EAAE,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,GAAG,EAAEH,WAAW,IAAI,CAACC,eAAhB,GAAkCT,GAAlC,GAAwCmB,SAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAJF,CADF;AAYD;;GApCQrB,a;UACUT,W,EACKE,S,EACPD,W,EACuEA,W;;;KAJ/EQ,a;;AA6DT,eAAeA,aAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport wrapper from '../store/configureStore';\r\nimport Head from 'next/head';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport { useInView } from \"react-intersection-observer\";\r\n\r\nimport AppLayout from '../components/AppLayout/AppLayout';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport {LOAD_O_RECIEVE_POST_REQUEST, LOAD_POST_REQUEST, UPDATE_TAG} from '../reducers/post';\r\nimport {Button} from \"antd\";\r\nimport Tags from \"../components/Tags\";\r\nimport PostCard from \"../components/PostCard\";\r\n\r\n\r\nfunction ObjectRecieve() {\r\n  const dispatch = useDispatch();\r\n  const [ref, inView] = useInView();\r\n  const { me } = useSelector((state) => state.user);\r\n  const { selectedTag,mainPosts, hasMorePost, loadPostLoading, id , object_TagsData } = useSelector((state) => state.post);\r\n\r\n  useEffect( // 화면 사이즈에 따라 버그가 발생중 fix1\r\n    () => {\r\n      if (inView && hasMorePost && !loadPostLoading) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id; // 인피니트 스크롤 구현을 위해 프론트 서버의 현재 렌더링중인 게시글들중 가장 아래 게시물의 게시넘버를 lastId로\r\n        dispatch({\r\n          type: LOAD_POST_REQUEST,\r\n          data:selectedTag,\r\n          boardNum:1,\r\n          lastId, // 게시물 10개를 요청하고 인피니트 스크롤 구현을 위해 lastId를 전송하여 lastId 기준으로 10개를 잘라 받아온다.\r\n        });\r\n        console.log(\"선택 된 태그:\"+selectedTag);\r\n      }\r\n    },[inView, hasMorePost, loadPostLoading, mainPosts, id]);\r\n\r\n  if (!me) {\r\n    return '내 정보 로딩중...';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>물건을 빌려줘 | 우리동네 렌탈대장</title>\r\n      </Head>\r\n      <AppLayout>\r\n        <Tags tagsData={object_TagsData} boardNum={1}/>\r\n        <div ref={hasMorePost && !loadPostLoading ? ref : undefined} />\r\n        {/* 아직 게시물을 전부 열람하지 않았고 && 게시물을 요청하는 중이 아닐경우 인피니트 스크롤 동작 : 아닐경우 undefined */}\r\n      </AppLayout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n  const cookie = context.req ? context.req.headers.cookie : '';\r\n  axios.defaults.headers.Cookie = cookie;\r\n  axios.defaults.headers.Cookie = '';\r\n  if (context.req && cookie) { // 타 유저간 쿠키가 공유되는 문제를 방지하기 위함\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: UPDATE_TAG,\r\n    data:\"전체\",\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POST_REQUEST,\r\n    data:\"전체\",\r\n    boardNum:1,\r\n  });\r\n  context.store.dispatch(END);\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default ObjectRecieve;\r\n"]},"metadata":{},"sourceType":"module"}